message OpenFileRequest {
  optional string fileName = 1; // fileName
  optional bool forRead = 2; // true, for read; false for write
  optional bool isAppend = 3; // true if file is opened for appending
}

message OpenFileResponse 
{
  optional int32 status = 1; // result of the call
  optional int32 handle = 2; // file handle. Use this to close file on write
// for read, the numbers for the various blocks. Not populated in write mode
  repeated string blockNums = 3;    // will contain old_block number : 12.1
  optional int32 size = 4; // only populated for append . Returns size of last block
  optional string newBlockNum = 5; //populated for append . ex: 12.3 
}


message CloseFileRequest {
  optional int32 handle = 1; // obtained from OpenFile
  optional int32 decision = 2; // 0-Abort 1-Commit

}

message CloseFileResponse {
  optional int32 status = 1;
}

message WriteBlockRequest 
{
  optional BlockLocations blockInfo = 1;   // this contains old block only
  repeated bytes data = 2;
  optional bool isAppend = 3; // when isAppend is true file will be written in append mode
  optional int32 count=4; // to return count of datanodes that were able to write successfully.
  optional string newBlockNum = 5; //populated for append . ex: 12.3
}

message WriteBlockResponse {
  optional int32 status = 1;
  optional int32 count =2;
}

message DataNodeLocation {
  optional string ip = 1	;
  optional int32 port = 2;
}

message BlockLocations {
  optional string blockNumber = 1;
  repeated DataNodeLocation locations = 2;
}

message BlockLocationRequest {
  repeated string blockNums = 1;
}

message BlockLocationResponse {
  optional int32 status = 1;
  repeated BlockLocations blockLocations = 2;
}

message AssignBlockRequest {
  optional int32 handle = 1; // obtain using call to OpenFile
}

message AssignBlockResponse {
  optional int32 status = 1;
  optional BlockLocations newBlock = 2;
}

message ListFilesRequest {
  optional string dirName = 1; // unused, place holder to support mkdir, etc
}

message ListFilesResponse {
  optional int32 status = 1;
  repeated string fileNames = 2;
}

message ReadBlockRequest {
  optional string blockNumber = 1;
}

message ReadBlockResponse {
  optional int32 status = 1;
  repeated bytes data = 2;
}

message BlockReportRequest {
  optional int32 id = 1; // identity of the DN. All communication to the NN uses the same id
  optional DataNodeLocation location = 2;
  repeated string blockNumbers = 3;
}

message BlockReportResponse {
  repeated int32 status = 1;
  repeated string deleteBlocks =2 ; //list of blocks that need to be deleted.
  optional DataNodeLocation location = 3; // This is to retrieve blocks from other data nodes 

}

message HeartBeatRequest {
  optional int32 id = 1;
}

message HeartBeatResponse {
  optional int32 status = 1;
}
